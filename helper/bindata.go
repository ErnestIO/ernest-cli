// Code generated by go-bindata.
// sources:
// lang/en.yml
// DO NOT EDIT!

package helper

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _langEnYml = []byte(`en:
  info:
    usage: "Displays system-wide information"
    args: " "
    description: |
      Info will display your current login information

      Example:
      $ ernest info
      Target:      http://127.0.0.1:8081
      User:        usr
      CLI Version: 2.2.0
  user:
    usage: "User related subcommands"
    list:
      usage: "List available users."
      args: " "
      description: |
        List available users.

      Example:
          $ ernest user list
    admin:
      usage: "Add or remove admin users"
      add:
        usage: "Adds a specific user as ernest admin"
        args: "$ ernest user admin add <username>"
        description: |
          Adds a specific user as ernest admin

        Example:
            $ ernest user admin add john
      rm:
        usage: "Removes a specific user as ernest admin"
        args: "$ ernest user admin rm <username>"
        description: |
          Removes a specific user as ernest admin

        Example:
            $ ernest user admin rm john
    create:
      usage: "Create a new user."
      args: "$ ernest user create <username> <password>"
      description: |
        Create a new user on the targeted instance of Ernest.
        Example:
          $ ernest user create <username> <password>
          You can also add an email to the user with the flag --email

        Example:
          $ ernest user create --email username@example.com <username> <password>
      flags:
        email:
          alias: email
          def:
          desc: Email for the user
        mfa:
          alias: mfa
          desc: Enable MFA
        admin:
          alias: admin
          desc: User will be created as admin
    change_password:
      usage: "Change password of available users"
      description: |
        Change password of available users.

        Example:
          $ ernest user change-password
        or changing a change-password by being admin:
          $ ernest user change-password --user <username> --current-password <current-password> --password <new-password>
      flags:
        user:
          alias: user
          def:
          desc: The username of the user to change password
        password:
          alias: password
          def:
          desc: The new user password
        current-password:
          alias: current-password
          def:
          desc: The current user password
    disable:
      usage: "Disable available users."
      args: "$ ernest user disable <username>"
      description: |
        Disable available users.

        Example:
          $ ernest user disable <user-name>
    info:
      usage: "Displays information about the specified user (current user by default)."
      description: |
        Example:
          $ ernest user info
          $ ernest user info --user <user-name>
      flags:
        user:
          alias: user
          def:
          desc: "Username"
    enable-mfa:
      usage: "Enable Multi-Factor Authentication."
      args: "$ ernest user enable-mfa [--user-name]"
      description: |
        Enables Multi-Factor Authentication for a user.

        Example:
          $ ernest user enable-mfa
      flags:
        user:
          alias: user-name
          desc: Target user
    disable-mfa:
      usage: "Disable Multi-Factor Authentication."
      args: "$ ernest user disable-mfa [--user-name]"
      description: |
        Disable Multi-Factor Authentication for a user.

        Example:
          $ ernest user disable-mfa
      flags:
        user:
          alias: user-name
          desc: Target user
    reset-mfa:
      usage: "Reset Multi-Factor Authentication."
      args: "$ ernest user reset-mfa [--user-name]"
      description: |
        Generates a new Multi-Factor Authentication token for a user.

        Example:
          $ ernest user reset-mfa
      flags:
        user:
          alias: user-name
          desc: Target user
  aws:
    create:
      usage: "Create a new aws project."
      description: |
        Create a new AWS project on the targeted instance of Ernest.
        Example:
          $ ernest project create aws --region us-west-2 --access_key_id AKIAIOSFODNN7EXAMPLE --secret_access_key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY my_project
        Template example:
          $ ernest project create aws --template myproject.yml myproject
        Where myproject.yaml will look like:
            ---
            fake: true
            access_key_id : AKIAIOSFODNN7EXAMPLE
            secret_access_key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            region: us-west-2
      args: "$ ernest project create aws --region us-west-2 --access_key_id AKIAIOSFODNN7EXAMPLE --secret_access_key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY my_project"
      flags:
        region:
          alias: "region, r"
          def: ""
          desc: "Project region"
        access_key_id:
          alias: "access_key_id, k"
          def: ""
          desc: "AWS access key id"
        secret_access_key:
          alias: "secret_access_key"
          def: ""
          desc: "AWS Secret access key"
        template:
          alias: "template, t"
          def: ""
          desc: "Project template"
        fake:
          alias: "fake, f"
          desc: "Fake project"
      success: "Project '%s' successfully created"
    update:
      usage: "Updates the specified AWS project."
      args: "$ ernest project update aws --access_key_id AKIAIOSFODNN7EXAMPLE --secret_access_key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY my_project"
      description: |
        Updates the specified AWS project.
        Example:
          $ ernest project update aws --access_key_id AKIAIOSFODNN7EXAMPLE --secret_access_key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY my_project
      flags:
        access_key_id:
          alias: "access_key_id, k"
          def: ""
          desc: "AWS access key id"
        secret_access_key:
          alias: "secret_access_key, s"
          def: ""
          desc: "AWS Secret access key"
      success: "Project %s successfully updated"
  azure:
    create:
      usage: "Create a new azure project."
      args: "$ ernest project create azure --region westus --subscription_id SUBSCRIPTION --client_id USER --client_secret PASSWORD --tenant_id TENANT --environment public my_project"
      description: |
        Create a new Azure project on the targeted instance of Ernest.

        Example:
          $ ernest project create azure --region westus --subscription_id SUBSCRIPTION --client_id USER --client_secret PASSWORD --tenant_id TENANT --environment public my_project

        Template example:
          $ ernest project create azure --template myproject.yml myproject
        Where myproject.yaml will look like:
          ---
          fake: true
          region: westus
          subscription_id: SUBSCRIPTION
          client_id: USER
          client_secret: PASSWORD
          tenant_id: TENANT
          environment: public
      flags:
        region:
          alias: "region, r"
          def: ""
          desc: "Project region"
        subscription_id:
          alias: "subscription_id"
          def: ""
          desc: "Azure subscription id"
        client_id:
          alias: "client_id, c"
          def: ""
          desc: "Azure client id"
        client_secret:
          alias: "client_secret, p"
          def: ""
          desc: "Azure client secret"
        tenant_id:
          alias: "tenant_id, t"
          def: ""
          desc: "Azure tenant_id"
        environment:
          alias: "environment"
          def: ""
          desc: "Azure environment. Supported values are public(default), usgovernment, german and chine"
        fake:
          alias: "fake, f"
          desc: "Fake project"
      success: "Project '%s' successfully created"
    update:
      usage: "Updates the specified Azure project."
      args: "$ ernest project update azure --subscription_id SUBSCRIPTION --client_id USER --client_secret PASSWORD --tenant_id TENANT --environment public my_project"
      description: |
        Updates the specified Azure project.

        Example:
          $ ernest project update azure --subscription_id SUBSCRIPTION --client_id USER --client_secret PASSWORD --tenant_id TENANT --environment public my_project
      flags:
        subscription_id:
          alias: "subscription_id"
          def: ""
          desc: "Azure subscription id"
        client_id:
          alias: "client_id, c"
          def: ""
          desc: "Azure client id"
        client_secret:
          alias: "client_secret, p"
          def: ""
          desc: "Azure client secret"
        tenant_id:
          alias: "tenant_id, t"
          def: ""
          desc: "Azure tenant_id"
        environment:
          alias: "environment"
          def: ""
          desc: "Azure environment. Supported values are public(default), usgovernment, german and chine"
      success: "Project %s successfully updated"
  docs:
    usage: "Open docs in the default browser."
    args: ""
    description: |
      Open docs in the default browser.

      Example:
        $ ernest docs
    success: "Visit ernest.io documentation site : %s"
  envs:
    list:
      usage: "List available environments."
      args: " "
      description: |
        List available environments and shows its most relevant information.

        Example:
          $ ernest environment list
    update:
      usage: "Creates an empty environment based on a specific project"
      args: "$ ernest env update <project> <environment> [--credentials credentials.yml]"
      description: |
        You must be logged in to execute this command.

        Examples:
          $ ernest env update --credentials project.yml my_project my_environment
      flags:
        sync_interval:
          alias: sync_interval
          desc: sets the automatic sync interval. Accepts cron syntax, i.e. '@every 1d', '@weekly' or '0 0 * * * *' (Daily at midnight)
        submissions:
          alias: submissions
          desc: allows user build submissions from users that have only read only permission to an environment. Options are 'enable' or 'disable'

    create:
      usage: "Creates an empty environment based on a specific project"
      args: "$ ernest env create <project> <environment> [--credentials project.yml]"
      description: |
        You must be logged in to execute this command.

        Examples:
          $ ernest env create my_project my_environment
          $ ernest env create --credentials project.yml my_project my_environment
      flags:
        credentials:
          alias: credentials
          desc: will override project information
        sync_interval:
          alias: sync_interval
          desc: sets the automatic sync interval. Accepts cron syntax, i.e. '@every 1d', '@weekly' or '0 0 * * * *' (Daily at midnight)
        submissions:
          alias: submissions
          desc: allows user build submissions from users that have only read only permission to an environment. Options are 'enable' or 'disable'

    apply:
      usage: "Builds or changes infrastructure."
      args: "$ ernest env apply <file.yml>"
      description: |
        Sends an environment YAML description file to Ernest to be executed.
        You must be logged in to execute this command.

        If the file is not provided, ernest.yml will be used by default.

        Examples:
          $ ernest env apply myenvironment.yml
          $ ernest env apply --dry myenvironment.yml
      flags:
        dry:
          alias: dry
          desc: print the changes to be applied on an environment intead of applying them
        credentials:
          alias: credentials
          desc: will override project information

    destroy:
      usage: "Destroy an environment."
      args: "$ ernest env delete <my_project> <my_environment>"
      description: |
        Destroys an environment by name.

        Example:
          $ ernest env delete <my_project> <my_environment>
      flags:
        force:
          alias: "force,f"
          desc: Hard ernest env removal.
        yesflag:
          alias: "yes,y"
          desc: Destroy an environment without prompting confirmation.
      confirmation: "Do you really want to destroy this environment? (Y/n) "
      success: "Environment successfully removed"
    history:
      usage: "Shows the history of an environment, a list of builds"
      args: "$ ernest env history <my_project> <my_env>"
      description: |
        Shows the history of an environment, a list of builds and its status and basic information.

        Example:
          $ ernest env history <my_project> <my_env>
    reset:
      usage: "Reset an in progress environment."
      args: "$ ernest env reset <my_env>"
      description: |
        Reseting an environment creation may cause problems, please make sure you know what are you doing.

        Example:
          $ ernest env reset <my_env>
      success: "You've successfully resetted the environment '%s / %s'"
    revert:
      usage: "Reverts an environment to a previous state"
      args: "$ ernest env revert <project> <env_name> <build_id>"
      description: |
        Reverts an environment to a previous known state using a build ID from 'ernest env history'.

        Example:
          $ ernest env revert <project> <env_name> <build_id>
          $ ernest env revert --dry <project> <env_name> <build_id>
      flags:
        dry:
          alias: "dry"
          desc: "print the changes to be applied on an environment intead of applying them"
      success: "Build has been succesfully submitted and is awaiting approval."
    definition:
      usage: "Show the current definition of an environment by its name"
      args: "$ ernest env definition <my_project> <my_env>"
      description: |
        Show the current definition of an environment by its name getting the definition about the build.

        Example:
          $ ernest env definition <my_project> <my_env>
      flags:
        build:
          alias: "build"
          desc: "Build ID"
    info:
      usage: "$ ernest env info <my_env> --build <specific build>"
      args: "$ ernest env definition <my_project> <my_env>"
      description: |
        Will show detailed information of the last build of a specified environment.
        In case you specify --build option you will be able to output the detailed information of specific build of an environment.

        Examples:
          $ ernest env definition <my_project> <my_env>
          $ ernest env definition <my_project> <my_env> --build build1
      flags:
        build:
          alias: "build"
          desc: "Build ID"
    sync:
      usage: "$ ernest env sync <my_project> <my_env>"
      args: "$ ernest env sync <my_project> <my_env>"
      description: |
        Will sync ernest's environment state from a provider.
        Any changes detected can then be resolved using the 'resolve' command.

        Examples:
          $ ernest env sync <my_project> <my_env>
    resolve:
      usage: "$ ernest env resolve --[accept|reject|ignore] <my_project> <my_env>"
      args: "$ ernest env resolve --[accept|reject|ignore] <my_project> <my_env>"
      flags:
        subscription_id:
          alias: "subscription_id, s"
          def: ""
          desc: "Azure subscription id"
        accept:
          alias: "accept, a"
          desc: "Accept Sync changes"
        reject:
          alias: "reject, r"
          desc: "Reject Sync changes"
        ignore:
          alias: "ignore, i"
          desc: "Ignore Sync changes"
      errors:
        non_valid: You should specify a valid resolution [accept|reject|ignore]

      description: |
        Provides the ability to manage changes detected by a sync.
        Options:
          accept changes from provider. Ernests internal state will be updated.
          reject changes from provider. Ernest will create a build to restore and overwrite any changes on the provider.
          ignore changes from provider. Ernest will disgard the results of the last sync.

        Examples:
          $ ernest env resolve --accept <my_project> <my_env>
          $ ernest env resolve --reject <my_project> <my_env>
          $ ernest env resolve --ignore <my_project> <my_env>
    review:
      usage: "$ ernest env review --[accept|reject] <my_project> <my_env>"
      args: "$ ernest env review --[accept|reject] <my_project> <my_env>"
      description: |
        Provides the ability to review submitted builds. Running without any flags will show the diff of the submitted build with the prior environment state.
        Options:
          accept submitted build. This will trigger an environment build
          reject submitted build. The build will be rejected.

        Examples:
          $ ernest env review <my_project> <my_env>
          $ ernest env review --accept <my_project> <my_env>
          $ ernest env review --reject <my_project> <my_env>
      flags:
        accept:
          alias: accept, a
          desc: Accept Sync changes
        reject:
          alias: reject, r
          desc: Reject Sync changes
    diff:
      usage: "$ ernest env diff <project_name> <env_name> <build_a> <build_b>"
      args: "$ ernest env diff <project_name> <env_name> <build_a> <build_b>"
      description: |
        Will display the diff between two different builds

        Examples:
          $ ernest env diff <my_project> <my_env> 1 2
    import:
      usage: "$ ernest env import <my_project> <my_env>"
      args: "$ ernest env import <my_project> <my_env>"
      description : |
        Will import the environment <my_env> from project <project_name>

        Examples:
          $ ernest env import my_project my_env
      flags:
        project:
          alias: "project"
          desc: "Project name"
        filters:
          alias: "filters"
          desc: "Import filters comma delimited list"
    schedule:
      list:
        usage: "List environment schedules."
        args: " "
        description: |
          Lists the schedules for a scpecific environment

          Example:
            $ ernest env schedule list
      add:
        usage: "Adds a new schedule for a specific environment."
        args: "$ ernest env schedule add --action <[power_on|power_off|sync]]> --instance_type <type_a> --schedule '0 0 * * * *' <project> <env> <my_schedule>"
        description: |
          Creates a new schedule for a specific environment

          Example:
            $ ernest env schedule add --action <[power_on|power_off|sync]]> --instance_type <type_a> --schedule '0 0 * * * *' <project> <env> <my_schedule>
        flags:
          action:
            alias: action
            desc: defines what action should be scheduled possible values are [power_on, power_off, sync]
          instance_type:
            alias: instance_type
            desc: power_on and power_off accept an instance_type to be powered on an off
          schedule:
            alias: schedule
            desc: sets the automatic schedule. Accepts cron syntax, i.e. '@every 1d', '@weekly' or '0 0 * * * *' (Daily at midnight)
        success: Environment schedules successfully updated
      rm:
        usage: "Removes a schedule on the specified environment."
        args: "$ ernest env schedule rm <project> <env> <my_schedule>"
        description: |
          Removes an existing schedule from a specific environment

          Example:
            $ ernest env schedule rm <project> <env> <my_schedule>
        success: "Environment schedules successfully updated"
  log:
    usage: "Inline display of ernest logs."
    args: " "
    description: |
      Display ernest server logs inline

      Example:
        $ ernest log
        $ ernest log --raw
    flags:
      raw:
        alias: raw
        desc: "Raw output will be displayed instead of pretty-printed"
  login:
    usage: "Login with your Ernest credentials."
    args: " "
    description: |
      Logs an user into Ernest instance.

      Example:
        $ ernest login

      It can also be used without asking the username and password.

      Example:
        $ ernest login --user <user> --password <password>
    flags:
      user:
        alias: "user"
        def: ""
        desc: "User credentials"
      password:
        alias: "password"
        def: ""
        desc: "Password credentials"
      verification:
        alias: "verification-code"
        def: ""
        desc: "MFA verification code"
  logout:
    usage: "Clear local authentication credentials."
    args: " "
    description: |
      Logs out an user from Ernest instance.

      Example:
        $ ernest logout
    errors:
      write: "Can't write config file"
    success: "Bye."
  monitor:
    usage: "Monitor an environment creation."
    args: "$ ernest monitor <project_name> <env_name>"
    description: |
      Monitors an environment while it is being built by its name.

      Example:
        $ ernest monitor <my_project> <my_env>
    success_1: "Environment has been successfully built"
    success_2: "You can check its information running `+"`"+`ernest-cli env info %s / %s"
  notification:
    list:
      usage: "List available notifications."
      args: " "
      description: |
        List available notifications.

        Example:
          $ ernest notification list
    delete:
      usage: "Deletes an existing notify."
      args: "$ ernest notify delete <notify_name>"
      description: |
        Deletes an existing notify on the targeted instance of Ernest.

        Example:
          $ ernest notify delete <notify_name>


        Example:
        $ ernest notify delete my_notify
      success: "Notify %s successfully delete"
    update:
      usage: "Update a new notify."
      args: "$ ernest notify update <notify_name> <notify_config>"
      description: |
        Update an existing notify on the targeted instance of Ernest.

        Example:
          $ ernest notify update <notify_name> <provider-details>


        Example:
        $ ernest notify update my_notify '{"url":"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"}'
      success: "Notify %s successfully updated"
    service:
      add:
        usage: "Add environment to an existing notify."
        args: "$ ernest notify add <notification_name> <project_name> [<env_name>]"
        description: |
          Adds a environment to an existing notify.

          Example:
            $ ernest notify add <notify_name> <project_name> <environment_name>


          Example:
          $ ernest notify add my_notify my_project
          $ ernest notify add my_notify my_project my_env
        success: "Environment %s successfully attached to %s notify"
      rm:
        usage: "Removes an environment to an existing notify."
        args: "$ ernest notify remove <notify_name> <project_name> [<env_name>]"
        description: |
          Removes an environment to an existing notify.

          Example:
            $ ernest notify remove <notify_name> <project_name> <env_name>


          Example:
          $ ernest notify remove my_notify my_project
          $ ernest notify remove my_notify my_project my_env
        success: "Environment %s successfully removed from %s notify"
    create:
      usage: "Create a new notify."
      args: "$ ernest notify create <notify_name> <notify_type> <notify_config>"
      description: |
        Create a new notify on the targeted instance of Ernest.

        Example:
          $ ernest notify create <notify_name> <provider_type> <provider-details>


        Example:
        $ ernest notify create my_notify slack '{"url":"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"}'
      success: "Notify %s successfully created"
  policy:
    list:
      usage: "List available policies."
      args: " "
      description: |
        List available policies.

        Example:
          $ ernest policy list
    delete:
      usage: "Deletes an existing policy."
      args: "$ ernest policy delete <policy_name>"
      description: |
        Deletes an existing policy

        Example:
          $ ernest policy delete --policy-name <policy_name>
      success: "Policy %s successfully deleted"
      flags:
        name:
          alias: "policy-name"
          def: ""
          desc: "Policy name"
    update:
      usage: "Update an existing policy."
      args: "$ ernest policy update --policy-name <policy_name> --spec <spec>"
      description: |
        Updates an existing policy

        Example:
          $ ernest policy update --policy-name <name> --spec <spec>
      success: "Policy %s successfully updated"
      errors:
        spec: "You should specify a valid path for your policy file"
      flags:
        name:
          alias: "policy-name"
          def: ""
          desc: "Policy name"
        spec:
          alias: "spec"
          def: ""
          desc: "Policy spec"
    create:
      usage: "Create a new policy."
      args: "$ ernest policy create --policy-name <notify_name> --spec <spec>"
      description: |
        Creates a new policy on Ernest

        Example:
          $ ernest policy create --policy-name <notify_name> --spec <spec>
      success: "Policy %s successfully created"
      errors:
        spec: "You should specify a valid path for your policy file"
      flags:
        name:
          alias: "policy-name"
          def: ""
          desc: "Policy name"
        spec:
          alias: "spec"
          def: ""
          desc: "Policy spec"
    show:
      usage: "Display existing policy details."
      args: "$ ernest policy show --policy-name <notify_name>"
      description: |
        Display existing policy details

        Example:
          $ ernest policy show --policy-name <notify_name>
      flags:
        name:
          alias: "policy-name"
          def: ""
          desc: "Policy name"
    attach:
      usage: "Attach a policy to an existing environment."
      args: "$ ernest policy attach --policy-name <notify_name> --environment project/env"
      description: |
        Attach a policy to an existing environment.

        Example:
          $ ernest policy attach --policy-name <notify_name> --environment project/env
      flags:
        name:
          alias: "policy-name"
          def: ""
          desc: "Policy name"
        environment:
          alias: "environment"
          def: ""
          desc: "Environment"
      errors:
        already_attached: "Policy is already attached to this environment"
        invalid_name: "Environment must be in form project/environment"
      success: "Policy %s successfully attached to %s"
    detach:
      usage: "Detach a policy from an existing environment."
      args: "$ ernest policy detach --policy-name <notify_name> --environment project/env"
      description: |
        Detch a policy to an existing environment.

        Example:
          $ ernest policy detach --policy-name <notify_name> --environment project/env
      flags:
        name:
          alias: "policy-name"
          def: ""
          desc: "Policy name"
        environment:
          alias: "environment"
          def: ""
          desc: "Environment"
      errors:
        not_attached: "Policy is not attached to this environment"
        invalid_name: "Environment must be in form project/environment"
      success: "Policy %s successfully detached from %s"
  logger:
    list:
      usage: "Lists active loggers."
      args: " "
      description: |
        List active loggers.

        Example:
          $ ernest preferences logger list
    set:
      usage: "Creates / updates a logger based on its type."
      args: "$ ernest preferences logger add [basic|logstash|rollbar]"
      description: |
        Creates / updates a logger based on its types.

        Example:
          $ ernest preferences logger add basic --logfile /tmp/ernest.log
          $ ernest preferences logger add logstash --hostname 10.50.1.1 --port 5000 --timeout 50000
          $ ernest preferences logger add rollbar --token MY_ROLLBAR_TOKEN
      flags:
        logfile:
          alias: logfile
          desc: Specify the path for the loging file
        token:
          alias: token
          desc: Rollbar token
        env:
          alias: env
          desc: Rollbar environment
        hostname:
          alias: hostname
          desc: Logstash hostname
        port:
          alias: port
          desc: Logstash port
        timeout:
          alias: timeout
          desc: Logstash timeout
      errors:
        hostname: "You should specify a logstash hostname  with --hostname flag"
        logfile: "You should specify a logfile with --logfile flag"
        port: "You should specify a logstash port with --port flag"
        timeout: "You should specify a logstash timeout with --timeout flag"
        token: "You should specify a rollbar token with --token flag"
        type: "Invalid type, valid types are basic and logstash"
      success: "Logger successfully set up"

    del:
      usage: "Deletes a logger based on its type."
      args: "$ ernest preferences logger delete [basic|logstash|rollbar]"
      description: |
        Deletes a logger based on its types.

        Example:
          $ ernest preferences logger delete basic
      success: "Logger successfully deleted"
  project:
    list:
      usage: "List available projects."
      args: " "
      description: |
        List available projects.

        Example:
          $ ernest project list
    info:
      usage: "Project information"
      args: "$ ernest project info <my_project>"
      description: |
        Display specific project information.

        Example:
          $ ernest project info <my_project>
  roles:
    set:
      usage: "ernest role set -u john -r owner -p project"
      args: "$ ernest roles set -u john -r owner -p my_project [-e my_environment]"
      description: |
        Set permissions for a user on a specific resource

        Example:
          $ ernest roles set -u john -r owner -p my_project
          $ ernest roles set -u john -r reader -p my_project -e my_environment
      success: "User '%s' has been authorized to %s resource %s"
      flags:
        user:
          alias: user, u
          def:
          desc: User to be authorized over the given resource
        project:
          alias: project, p
          def:
          desc: Project to authorize
        role:
          alias: role, r
          def:
          desc: Role type [owner, reader]
        environment:
          alias: environment, e
          def:
          desc: Environment to authorize
    unset:
      usage: "ernest role unset -u john -r owner -p my_project"
      args: "$ ernest roles set -u john -r reader -p my_project [-e my_environment]"
      description: |
        Set permissions for a user on a specific resource

        Example:
          $ ernest roles set -u john -r owner -p my_project
          $ ernest roles set -u john -r reader -p my_project -e my_environment
      success: "User '%s' has been unauthorized as %s %s"
  target:
    usage: "Configure Ernest target instance."
    args: "$ ernest target <ernest_url>"
    description: |
      Sets up ernest instance target.

      Example:
        $ ernest target https://myernest.com
  usage:
    usage: "Exports an usage report to the current folder"
    args: " "
    description: |
      Example:
        $ ernest usage --from 2017-01-01 --to 2017-02-01 --output=report.log
        A file named report.log has been exported to the current folder

      Example 2:
        $ ernest usage > myreport.log
    flags:
      from:
        alias: from
        desc: "the from date the report will be calculated from. Format YYYY-MM-DD"
      to:
        alias: to
        desc: "the to date the report will be caluclutated to. Format YYYY-MM-DD"
      output:
        alias: output
        desc: "the file path to store the report"
    success: "A file named %s has been exported to the current folder"
  vcloud:
    create:
      usage: "Create a new vcloud project."
      args: "$ ernest project create vcloud [--template myproject.yml] <project-name>"
      description: |
        Create a new vcloud project on the targeted instance of Ernest.

        Example:
          $ ernest project create vcloud --user username --password xxxx --org MY-ORG-NAME --vdc MY-VDC-NAME --vcloud-url https://myernest.com myproject

        Template example:
          $ ernest project create vcloud --template myproject.yml myproject
          Where myproject.yaml will look like:
            ---
            fake: true
            org: org
            user: bla
            password: pwd
            vdc: MY-VDC
            vcloud-url: "http://ss.com"
      flags:
        user:
          alias: user
          def:
          desc: "Your VCloud valid user name"
        password:
          alias: password
          def:
          desc: "Your VCloud valid password"
        org:
          alias: org
          def:
          desc: "Your vCloud Organization"
        vdc:
          alias: vdc
          def:
          desc:
        vse-url:
          alias: vse-url
          def:
          desc: VSE URL
        vcloud-url:
          alias: vcloud-url
          def:
          desc: VCloud URL
        public-network:
          alias: public-Network
          def:
          desc: Public Network
        vcloud-region:
          alias: vcloud-region, reg
          def:
          desc: Project region
        template:
          alias: template
          def:
          desc: Template
        fake:
          alias: fake
          def:
          desc: Fake environment
      success: "Project '%s' successfully created"
    delete:
      usage: "Deletes the specified project."
      args: "$ ernest project delete <project-name>"
      description: |
        Deletes the name specified project.

        Example:
          $ ernest project delete my_project
      success: "Project %s successfully removed"
    update:
      usage: "Updates the specified VCloud project."
      args: "$ ernest project update vcloud [--user <me>] [--org <org>] [--password <secret>] <project-name>"
      description: |
        Updates the specified VCloud project.

        Example:
          $ ernest project update vcloud --user <me> --org <org> --password <secret> my_project
      success: "Project %s successfully updated"
`)

func langEnYmlBytes() ([]byte, error) {
	return _langEnYml, nil
}

func langEnYml() (*asset, error) {
	bytes, err := langEnYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/en.yml", size: 34529, mode: os.FileMode(420), modTime: time.Unix(1515757265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lang/en.yml": langEnYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lang": &bintree{nil, map[string]*bintree{
		"en.yml": &bintree{langEnYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

